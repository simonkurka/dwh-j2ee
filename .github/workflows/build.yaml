name: Build Docker Images

on:
  push:
    tags:
      - v[0-9]+.[0-9]+**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up JDK 15
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 15

      - name: Cache Local Maven Repo
        uses: actions/cache@v2.1.2
        with:
          path: ~/.m2/repository
          key: maven-repo
          
      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=repository::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Build
        run: mvn clean install
        
      - uses: actions/upload-artifact@v2
        with:
          name: EAR
          path: target/dwh-j2ee-${{ steps.prep.outputs.version }}.ear
  docker-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=repository::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          echo ::set-output name=title::$(echo "${{ github.job }}" | cut -d'-' -f2)

      - name: Build and push docker image for ${{ github.job }}
        uses: docker/build-push-action@v2
        with:
          context: docker/build/${{ steps.prep.outputs.title }}
          file: docker/build/${{ steps.prep.outputs.title }}/Dockerfile
          tags: |
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:latest
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:${{ steps.prep.outputs.version }}
          push: true
  docker-httpd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=repository::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          echo ::set-output name=title::$(echo "${{ github.job }}" | cut -d'-' -f2)

      - name: Build and push docker image for ${{ github.job }}
        uses: docker/build-push-action@v2
        with:
          context: docker/build/${{ steps.prep.outputs.title }}
          file: docker/build/${{ steps.prep.outputs.title }}/Dockerfile
          tags: |
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:latest
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:${{ steps.prep.outputs.version }}
          push: true
  docker-wildfly:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=repository::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          echo ::set-output name=title::$(echo "${{ github.job }}" | cut -d'-' -f2)
          
      - uses: actions/download-artifact@v2
        with:
          name: EAR
          path: docker/build/wildfly

      - name: Build and push docker image for ${{ github.job }}
        uses: docker/build-push-action@v2
        with:
          context: docker/build/${{ steps.prep.outputs.title }}
          file: docker/build/${{ steps.prep.outputs.title }}/Dockerfile
          tags: |
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:latest
            ghcr.io/${{ steps.prep.outputs.repository }}/dwh-j2ee-${{ steps.prep.outputs.title }}:${{ steps.prep.outputs.version }}
          push: true
  deb:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=repository::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          
      - uses: actions/download-artifact@v2
        with:
          name: EAR
          path: debian

      - name: Build DEB
        working-directory: debian
        run: |
          ./build.sh ${{ steps.prep.outputs.version }}
        
      - uses: actions/upload-artifact@v2
        with:
          name: DEB
          path: debian/aktin-dwh_${{ steps.prep.outputs.version }}.deb
  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - deb
    steps:
      - name: Prepare Version
        id: prep
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.prep.outputs.version }}
          draft: true
          prerelease: false

      - uses: actions/download-artifact@v2
        with:
          name: EAR

      - name: Upload Release EAR
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dwh-j2ee-${{ steps.prep.outputs.version }}.ear
          asset_name: dwh-j2ee-${{ steps.prep.outputs.version }}.ear
          asset_content_type: application/java-archive
          
      - uses: actions/download-artifact@v2
        with:
          name: DEB
          
      - name: Upload Release DEB
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./aktin-dwh_${{ steps.prep.outputs.version }}.deb
          asset_name: aktin-dwh_${{ steps.prep.outputs.version }}.deb
          asset_content_type: application/octet-stream

